import os
import sys
import rtconfig

if os.getenv('RTT_ROOT'):
    RTT_ROOT = os.getenv('RTT_ROOT')
else:
    RTT_ROOT = os.path.normpath(os.getcwd() + '/../..')


Export('RTT_ROOT')
Export('rtconfig')

TARGET = 'rtt_mbed.' + rtconfig.TARGET_EXT

env = Environment(tools = ['mingw'],
	AS = rtconfig.AS, ASFLAGS = rtconfig.AFLAGS,
	CC = rtconfig.CC, CCFLAGS = rtconfig.CFLAGS,
	AR = rtconfig.AR, ARFLAGS = '-rc',
	LINK = rtconfig.LINK, LINKFLAGS = rtconfig.LFLAGS,

    ASCOMSTR   = "Compiling $TARGET", 
    CCCOMSTR   = "Compiling $TARGET", 
    LINKCOMSTR = "Linking $TARGET",)
# env.PrependENVPath('PATH', rtconfig.EXEC_PATH)

PROJECT    = 'mbed'
HEX_TARGET = PROJECT + '.hex'
BIN_TARGET = PROJECT + '.bin'

# Application some variables
src = []
inc = ['./']

# Search all SConscript file and add src/header files
for root, dirs, files in os.walk(str(Dir('#'))):
    for item in files:
        if item == 'SConscript':
            temp = SConscript(os.path.join(root, item), variant_dir = 'build/' + root, duplicate = 0)

            src += temp['src']
            inc += temp['inc']          

# include rtt
temp = SConscript(RTT_ROOT + '/src/SConscript', variant_dir = 'build/rtt/', duplicate = 0)
src += temp['src']
inc += temp['inc']   

temp = SConscript(RTT_ROOT + '/inc/SConscript', variant_dir = 'build/inc/', duplicate = 0)
src += temp['src']
inc += temp['inc']  

#include cpu
temp = SConscript(RTT_ROOT + '/cpu/SConscript', variant_dir = 'build/cpu/', duplicate = 0)
src += temp['src']
inc += temp['inc']    

# Building
out = env.Program(TARGET, src, CPPPATH = inc)
env.SideEffect(PROJECT+'.map', out)

# Post Action
a1 = env.AddPostAction(TARGET, rtconfig.OBJCPY + ' -Oihex ' + '$TARGET ' + HEX_TARGET)
a2 = env.AddPostAction(TARGET, rtconfig.OBJCPY + ' -Obinary -S ' + '$TARGET ' + BIN_TARGET)
env.SideEffect(HEX_TARGET, a1)
env.SideEffect(BIN_TARGET, a2)

env.AddPostAction(TARGET, rtconfig.SIZE + ' $TARGET')
